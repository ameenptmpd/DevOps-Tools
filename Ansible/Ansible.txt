ansible
-------
Working: 
	Ansible works by connecting to nodes(SSH) and pushing out small programs—called modules—to these nodes. 
	Modules are used to accomplish automation tasks in Ansible. 
	These programs are written to be resource models of the desired state of the system.
Steps:
------
	1) Create user-in both master and worker nodes
		- same username and password
			- create user
				useradd -m -s /bin/bash ameenpt
			- set password for the user
				passwd ameenpt
		- add this user in to sudo group - ansible needs administrative permission
				usermod -aG sudo ameenpt
		- disable password based authentication for sudo users
			- https://code-maven.com/enable-ansible-passwordless-sudo
			
				visudo 
					- in this page change 
						%sudo   ALL=(ALL:ALL) ALL
								to 
						%sudo   ALL=(ALL:ALL) NOPASSWD: ALL" 
					- save it.
			- for confirming it is changed or not
				cat /etc/sudoers
		- enable password based authentication for ssh(in worker node)
			- login as ameenpt
				sudo su ameenpt
			- update /etc/ssh/sshd_config
				sudo vi /etc/ssh/sshd_config 
					- in this page change 
							PasswordAuthenication no
								to 
							PasswordAuthenication yes
									(In this file we can set section time out interval for ssh login
										ClientAliveInterval 1200
										ClientAliveCountMax 3
									)
					- save it
						
		- restart the ssh service
				sudo systemctl restart sshd.service
		

		- Create ssh key in master node and copy thet into worker node
			-In worker node create a .ssh directory for copy the public key from master node
				- login as ameenpt
					sudo su ameenpt
					cd 
					mkdir -p ~/.ssh
					touch ~/.ssh/authorized_keys
					chmod -R 700 ~/.ssh
					chmod 600 ~/.ssh/*
			-In master node create ssh key and copy
				- create ssh key
					sudo su - ameenpt
					ssh-keygen -t rsa
				- copy id_rsa.pub to worker node
					ssh-copy-id ameenpt@<private_ip>
	2) Install ansible
		sudo apt update
		sudo apt upgrade
		
		sudo apt install python3 python3-pip
		sudo apt-get install software-properties-common
		
		sudo apt-add-repository --yes --update ppa:ansible/ansible
		sudo apt install python3-pip                              # required only when pip3 is not a installed
		
		sudo apt-get install ansible
		pip3 install --user ansible
		ansible --version
		export PATH=$PATH:/hpme/ameenpt/.local/bin                # setting path variable for ansible
		
	3) Add inventory file in master node (adding workernodes into the master)
		The default location of inventory file is etc/ansible
		- change owner of the ansible directory as the created new user
			cd /etc
			sudo chown ameenpt:ameenpt ansible
			cd /etc/ansible
			chmod 777 *
		- add inventory entries in hosts file
			sudo nano hosts
		in this hosts file add:
			[backend]
			<ip_address of workernodes>
			
			eg:
				[backend]  # host group name
				172.23.35.108 # IP address associated with this host group. 
		
============================================================================================================================================		
		
	4)  adhoc commands for testing
		-for checking
				--------
					ansible backend -m ping
						it will display like
								172.31.37.108 | SUCCESS => {
									"ansible_facts": {
										"discovered_interpreter_python": "/usr/bin/python3"
									},
									"changed": false,
									"ping": "pong"
								}
				--------
					 ansible backend -m shell -a "mkdir test"
						it will create a folder in worker node home directory

============================================================================================================================================

	5) Playbook 
		- create playbook file and save it(yaml file)
			eg:for creating a file named ameen.txt	
				---
				- hosts: all
				  become: true
				  tasks:
				  - name: Create file named ameen.txt
					file:
					  path: /tmp/ameen.txt
					  state: touch
			
		- save this playbook as a yaml file
		- Execute the playbook file
			ansible-playbook <filename.yaml> -kK
			
					-k: This option prompts you for the SSH password when connecting to the target servers. 
						It's useful when you don't have SSH keys set up for authentication and need to enter the password manually.

					-K: This option prompts you for the privilege escalation (sudo) password when executing tasks 
						that require elevated privileges on the target servers.
						It's useful when tasks in your playbook require sudo or root access.
						
============================================================================================================================================

	6)Ansible role
	
	- create an ansible role
			Prerequisites:
					Ansible installed on your control machine.
					A target host where you want to install Nginx.

	Step 1: 
		- Create the Role Directory Structure

			- Ansible roles 
				follow a specific directory structure. 
				You can use the ansible-galaxy command to generate the initial structure:
							bash
								ansible-galaxy init Demorole					# It will create a template folder
								sudo apt update -y && sudo apt install tree		# installing tree tool for viewing directory structure(it is not mandatory)
								tree Demorole									# code for viewing directory structure
									
									It will show like the below
									
										ubuntu@ip-172-31-43-45:~$ tree Demorole/
										Demorole/
										├── README.md
										├── defaults			# This directory contains default variable values for your role. 
										│   └── main.yml		# These variables can be overridden in your playbook if needed.
										│
										├── files				# files: This directory can contain files that need to be copied to the target machine during role execution. 
										│						# These files are usually static and don't require any templating.
										│
										├── handlers			# Handlers are used to trigger actions when notified by tasks. This file defines the handlers for this role.
										│   └── main.yml
										│
										├── meta				# This file contains metadata about the role, such as its dependencies and supported platforms.
										│   └── main.yml
										│
										├── tasks				# This is the main playbook for your role, where you define the tasks that should be performed by the role. 
										│   └── main.yml	
										│
										├── templates			# This directory can contain template files that are processed by Ansible's template module. 
										│						# Templates allow you to dynamically generate files based on variables.
										│
										├── tests
										│   ├── inventory		# tests/inventory: This is where you can define an inventory file specifically for testing this role.
										│   └── test.yml		# tests/test.yml: This is a test playbook that you can use to test your role.
										│
										└── vars				# This directory contains variables that are used within the role tasks or templates.
											└── main.yml
 


	Step 2:
		-Define Role Tasks
			- Edit the tasks/main.yml file 
					- inside the role directory (Demorole/tasks/main.yml) 
					- define the tasks for your role. 
					- Add the following yaml content and save it:
						- The below tasks will update the package cache, install Nginx, and start the Nginx service on the target host.
							yaml

							---		# this line is required
							- name: Update APT package cache
							  become: yes
							  apt:
								update_cache: yes

							- name: Install Nginx
							  become: yes
							  apt:
								name: nginx
								state: present

							- name: Start Nginx service
							  become: yes
							  service:
								name: nginx
								state: started
								enabled: yes

	Step 3: Create a Playbook to Use the Role
		- Create a playbook that uses the role we are created. 
			- For example, create a file named my_playbook.yml:

					yaml

					---
					- hosts: all #will work on ubuntu only 
					  become: yes
					  roles:
						- Demorole

			This playbook specifies the target hosts (web_servers) and assigns the Demorole to those hosts.
			
	Step 4: Run the Playbook
		- Now, we can run the playbook to install Nginx on the target host(s). 
				ansible-playbook -i <inventory_file> my_playbook.yml
								# Replace <inventory_file> with the path to our inventory file, which should contain the IP address or hostname of the target host(s).

	Step 6: Verify Nginx Installation
		- After the playbook has completed successfully, we can verify Nginx's installation and status on the target host(s):
		
						ansible <target_host> -m command -a "nginx -v"  # Check Nginx version

			That's it! we are created a simple Ansible role and used it in a playbook to install and configure Nginx on a remote host. 
			You can expand on this by adding more tasks, variables, and roles to manage various aspects of your infrastructure.
